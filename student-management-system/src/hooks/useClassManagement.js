import { useState } from "react";
import {
    createClass,
    deleteClass,
    getAllClasses,
    getClassById,
    updateClass,
} from "../api/classes"; // ðŸ“Œ Báº¡n cáº§n táº¡o file api/classes.js Ä‘Ãºng theo tÃªn hÃ m

export const useClassManagement = () => {
    const [classes, setClasses] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // ðŸŽ¯ Fetch danh sÃ¡ch lá»›p
    const fetchClasses = async (filters = {}) => {
        setLoading(true);
        try {
            const data = await getAllClasses(filters);
            setClasses(data);
        } catch (err) {
            console.error("Lá»—i khi táº£i danh sÃ¡ch lá»›p:", err);
            setError(err);
        } finally {
            setLoading(false);
        }
    };

    // ðŸŽ¯ Láº¥y lá»›p theo ID
    const fetchClassById = async (id) => {
        try {
            const cls = await getClassById(id);
            return cls;
        } catch (err) {
            setError(err);
            return null;
        }
    };

    // ðŸŽ¯ ThÃªm lá»›p má»›i
    const addClass = async (classData) => {
        try {
            const newClass = await createClass(classData);
            setClasses((prev) => [...prev, newClass]);
            return newClass;
        } catch (err) {
            setError(err);
            throw err;
        }
    };

    // ðŸŽ¯ Cáº­p nháº­t lá»›p
    const editClass = async (id, updatedData) => {
        try {
            const updatedClass = await updateClass(id, updatedData);
            setClasses((prev) =>
                prev.map((cls) => (cls.id === id ? updatedClass : cls))
            );
            return updatedClass;
        } catch (err) {
            setError(err);
            throw err;
        }
    };

    // ðŸŽ¯ XÃ³a lá»›p
    const removeClass = async (id) => {
        try {
            await deleteClass(id);
            setClasses((prev) => prev.filter((cls) => cls.id !== id));
        } catch (err) {
            setError(err);
            throw err;
        }
    };

    return {
        classes,
        loading,
        error,
        fetchClasses,
        fetchClassById,
        addClass,
        editClass,
        removeClass,
    };
};