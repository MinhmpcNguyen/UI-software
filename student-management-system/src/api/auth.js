import axios from "axios";

const API_URL = "http://127.0.0.1:8000/api/auth"; // üëâ Thay ƒë√∫ng URL backend

// üü¢ ƒêƒÉng nh·∫≠p
export const loginUser = async (email, password, role) => {
  console.log("üì§ G·ª≠i login request v·ªõi:", { email, password, role }); // log ƒë·∫ßu v√†o

  try {
    const response = await axios.post(`${API_URL}/login`, {
      useremail: email,
      password,
      role,
    });

    console.log("üì• K·∫øt qu·∫£ t·ª´ API tr·∫£ v·ªÅ:", response.data); // log ƒë·∫ßu ra
    return response.data;
  } catch (error) {
    console.error("‚ùå API login l·ªói:", error);
    throw error.response ? error.response.data : { message: "L·ªói kh√¥ng x√°c ƒë·ªãnh" };
  }
};

// üü¢ ƒêƒÉng k√Ω
export const registerUser = async (formData) => {
  try {
    const response = await axios.post(`${API_URL}/register`, formData);
    return response.data;
  } catch (error) {
    throw error.response ? error.response.data : { message: "L·ªói kh√¥ng x√°c ƒë·ªãnh" };
  }
};

// üü¢ Qu√™n m·∫≠t kh·∫©u
export const forgotPassword = async (email) => {
  try {
    const response = await axios.post(`${API_URL}/forgot-password`, { email });
    return response.data;
  } catch (error) {
    throw error.response ? error.response.data : { message: "L·ªói kh√¥ng x√°c ƒë·ªãnh" };
  }
};

// üü¢ ƒêƒÉng xu·∫•t
// src/api/auth.js

export const logoutUser = async () => {
  // Kh√¥ng c·∫ßn g·ªçi API n·ªØa
  return Promise.resolve({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng!" });
};

// ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
export const getCurrentUser = async () => {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("Kh√¥ng c√≥ token");

  const response = await axios.get(`${API_URL}/me`, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  return response.data;
};

// ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
export const updateCurrentUser = async (data) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        ...data, // tr·∫£ v·ªÅ d·ªØ li·ªáu m·ªõi (gi·∫£ s·ª≠ update th√†nh c√¥ng)
        updatedAt: new Date().toISOString(),
      });
    }, 500);
  });
};